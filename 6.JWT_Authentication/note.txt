secure and efficient user authentication is important. JWT (json web token) give solution for token based authentication, enabling secure transmission of user information between parties.

JWT is a standard used to securely trasmit information between a client(frontend) and a server(backend).

It is used to verify user identites, authenticate them , and ensure safe communication between them. 
JWT are mainly used in web apps and api's to protect against unauthorized access. 

The data is JWT such as user details is store in json format.
To keep data safe , the token is signed cryptographically.
The signing can be done using these cryptographic methods:

1. HMAC (Hash-based Message Authentication Code)
2. RSA or ECDSA (Asymmetric cryptographic algorithms)

JWTs are primarily used for authentication and secure data exchange in web applications and APIs.
_____________________________________________________________________________________________________

How JWT token Works?

1. User Login karta hai and send login creditional to the server.
2. If the creditional is valid, server create a JWT containing user data and sign it with a seceret  key.
3. The jwt is send back to client and save in local storage or coockies. 
4. Client Sends Token in Requests: For protected routes, the client includes the JWT in the Authorization header (Bearer Token).
5. Server Verifies and Responds: The server verifies the token, extracts user info, and processes the request if valid. 

step 4 and 5
Jab client kisi protected route par request karega (jaise /profile), vo token bhejega header me.
Server ke paas ek middleware hota hai jo token verify karta hai.
Agar token valid hai, request /profile route tak pahunchti hai.

==================================================================================================
A JWT consists of three parts, separated by dots (.)
Header. Payload. Signature

Header: The header contains metadata about the token, including the signing algorithm and token type here metadata means data about data.
{
    "alg": "HS256",
    "typ": "JWT"
}
alg: Algorithm used for signing (e.g., HS256, RS256).
typ: Token type, always "JWT".

Base64Url Encoded Header
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9

Payload: The payload contains the information about the user also called as a claim and some additional information including the timestamp at which it was issued and the expiry time of the token.

{
    "userId": 123,
    "role": "admin",
    "exp": 1672531199
}
Common claim types:

Base64Url Encoded Payload
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNzA4MzQ1MTIzLCJleHAiOjE3MDgzNTUxMjN9

iss (Issuer): Identifies who issued the token.
sub (Subject): Represents the user or entity the token is about.
aud (Audience): Specifies the intended recipient.
exp (Expiration): Defines when the token expires.
iat (Issued At): Timestamp when the token was created.
nbf (Not Before): Specifies when the token becomes valid.


Signature: The signature ensures token integrity and is generated using the header, payload, and a secret key. In this example we will use HS256 algorithm to implement the Signature part

HMACSHA256(
    base64UrlEncode(header) + "." + base64UrlEncode(payload),
    secret
)
Example Signature:
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

4. Final JWT token
After all these steps the final JWT token is generated by joining the Header, Payload and Signature via a dot. It looks like as it is shown below.

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNzA4MzQ1MTIzLCJleHAiOjE3MDgzNTUxMjN9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
===================================================================================================
