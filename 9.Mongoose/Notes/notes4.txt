in example 2 we are going to do these topics.
ðŸ“¦ 6. Use Mongoose Advanced Features
-Pagination (.limit(), .skip())
-Sorting (.sort())
-Filtering with query params (req.query)
-Virtuals, pre/post hooks
-Populate (MongoDB relationships).


Filtering
---------
 

const employeeSchema = new mongoose.Schema({
  name: String,
  age: Number,
  city: String,
  department: String,
  salary: Number,
  skills: [String], // array field for $in, $nin
  isActive: Boolean, // for boolean checks
  joinedAt: Date     // for date filtering
});

  
 


ðŸ”¹ Examples for Filtering & Conditions
âœ… 1. $gt, $lt, $gte, $lte
// Employees with salary > 50000
Employee.find({ salary: { $gt: 50000 } });

âœ… 2. $eq, $ne
// Employees whose city is not Delhi
Employee.find({ city: { $ne: "Delhi" } });

âœ… 3. $in, $nin
// Employees with skills in JavaScript or Excel
Employee.find({ skills: { $in: ["JavaScript", "Excel"] } });

âœ… 4. $or, $and, $not
// Employees who live in Delhi OR have salary > 55000
Employee.find({
  $or: [
    { city: "Delhi" },
    { salary: { $gt: 55000 } }
  ]
});

// Employees with salary > 40000 AND are active
Employee.find({
  $and: [
    { salary: { $gt: 40000 } },
    { isActive: true }
  ]
});

âœ… 5. $regex
// Name starts with "A"
Employee.find({ name: { $regex: /^A/, $options: 'i' } });


âœ… Summary
Operator
Operator	 Use Case Example
$gt	       salary > 50000
$lt	       age < 30
$eq	       city == "Delhi"
$ne	       department != "HR"
$in	       skills in ["Excel", "MongoDB"]
$nin	     skills not in ["Excel"]
$or	       city == "Delhi" OR salary > 50000
$and	     salary > 40000 AND isActive == true
$not	     NOT (salary > 50000)
$regex	   name starts with 'A'

ek baar me multiple filter laga kr find me daal do
try {
    const filters = {
      // $gt and $lt - salary between 40k and 60k
      salary: { $gt: 40000, $lt: 60000 },
      // $eq - department must be Engineering
      department: { $eq: 'Engineering' },
      // $in - cities must be either Delhi or Mumbai
      city: { $in: ['Delhi', 'Mumbai'] },
      // $regex - name contains "an" (case-insensitive)
      name: { $regex: 'an', $options: 'i' },
      // $and - combine multiple conditions
      $and: [
        { age: { $gte: 25 } },
        { isAction: true }
      ],
      // $not - exclude isAction false (same as isAction: true)
      isAction: { $not: { $eq: false } }
    };
    const employees = await Employee.find(filters);

    res.status(200).json(employees);
}
==============================================================================================
Sort()
------
1. sort by salery ascending
Employee.find().sort({salary:1});
2. sort by salary decending
Employee.find().sort({salary:-1});
3. Alphabetical A-Z 
Employee.find().sort({name:1});


Limit(): limit number of results
-------
Employee.find().limit(5); //return only first 5 document 

.skip() - skip number of results(used in pagination)
-------
Employee.find().skip(5) //skip first 5 results
Employee.find().skip(10).limit(5) //get 5 result after skipping  first 10

