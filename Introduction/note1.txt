Node.js is an open-source and cross-platform JavaScript runtime environment.
A Node.js app runs in a single process, without creating a new thread for every request.
----------------------------------------------------------------------------------------------------
CJS and MJS, which are two types of JavaScript module systems.
What are CJS and MJS?
These refer to CommonJS (CJS) and ES Modules (MJS) ‚Äî two ways of organizing and importing/exporting code in JavaScript.
 CJS = CommonJS
Traditional module system used in Node.js

Files usually have a .js extension

Uses:
const fs = require('fs');  // import
module.exports = myFunction;  // export


Enable ES Module Support
To use import statements, you need to either:
Rename your file to .mjs, OR
Add "type": "module" in your package.json
----------------------------------------------------------------------------------------------------

üåê MJS = ES Modules (ECMAScript Modules)
Modern JavaScript module system (standardized in ES6)

Used in both browsers and Node.js

File extension is typically .mjs (or .js if configured)

Uses:

import fs from 'fs';  // import
export default myFunction;  // export
Asynchronous (modules are loaded before running)
They use top-level await, static analysis, and dependency resolution before the program starts running.
----------------------------------------------------------------------------------------------------

The createServer() method of http creates a new HTTP server and returns it.

When the server is ready, the callback function is called, in this case informing us that the server is running.
Whenever a new request is received, the request event is called, providing two objects: a request (an http.IncomingMessage object) and a response (an http.ServerResponse object).
Those 2 objects are essential to handle the HTTP call.
The first provides the request details. 
The second is used to return data to the caller.

In this case with:

res.statusCode = 200;

we set the statusCode property to 200, to indicate a successful response.
We set the Content-Type header
res.setHeader('Content-Type', 'text/plain');
and we close the response, adding the content as an argument to end():
res.end('Hello World\n');

npm installs, updates and manages downloads of dependencies of your project. Dependencies are pre-built pieces of code, such as libraries and packages, that your Node.js application needs to work.


Installing a single package
You can also install a specific package by running

npm install <package-name>
Shell
Copy to clipboard
Furthermore, since npm 5, this command adds <package-name> to the package.json file dependencies. Before version 5, you needed to add the flag --save.

Often you'll see more flags added to this command:

--save-dev installs and adds the entry to the package.json file devDependencies
--no-save installs but does not add the entry to the package.json file dependencies
--save-optional installs and adds the entry to the package.json file optionalDependencies
--no-optional will prevent optional dependencies from being installed
Shorthands of the flags can also be used:

-S: --save
-D: --save-dev
-O: --save-optional

What Are Optional Dependencies in JavaScript / Node.js?
dependencies: Required to run your app
devDependencies: Only needed for development (e.g., testing tools)
optionalDependencies: Dependencies that your app can use if available, but can still run without them.

üß© So, What Are optionalDependencies?
They are packages that are not strictly required for your app to function. If they fail to install (e.g., on a different system), Node.js will not break or crash ‚Äî it will just skip them.
Why Use optionalDependencies?
Here are some real-world reasons:
Platform-specific features:
Example: fsevents is only used on macOS for better file watching.
You can add it as optional so it won‚Äôt break on Windows or Linux.

npm update <package-name>
npm install <package-name>@<version>

Running Tasks
The package.json file supports a format for specifying command line tasks that can be run by using
npm run <task-name>